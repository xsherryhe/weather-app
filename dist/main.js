(()=>{"use strict";var n={689:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(537),o=r.n(t),a=r(645),c=r.n(a)()(o());c.push([n.id,":root {\n  --site-font: 'Helvetica', sans-serif;\n  --background-color: rgb(255, 255, 165);\n  --secondary-color: rgb(0, 70, 162);\n  --light-secondary-color: rgb(200, 224, 255);\n  --sunny-color: rgb(255, 255, 165);\n  --sunny-font-color: black;\n  --cloud-color: rgb(165, 204, 255);\n  --cloud-font-color: black;\n  --lowVis-color: rgb(70, 70, 70);\n  --lowVis-font-color: white;\n  --rain-color: rgb(0, 70, 162);\n  --rain-font-color: rgb(200, 224, 255);\n  --snow-color: white;\n  --snow-font-color: black;\n  --thunder-color: black;\n  --thunder-font-color: yellow;\n}\n\nhtml {\n  font-size: 18px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: var(--site-font);\n  min-height: 100vh;\n  background-color: var(--sunny-color);\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n}\n\na {\n  color: var(--secondary-color);\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\nbutton {\n  font-size: 1rem;\n  padding: 0.5rem 1.5rem;\n  cursor: pointer;\n  background-color: var(--secondary-color);\n  color: white;\n  border-radius: 0.2rem;\n}\n\nbutton:hover {\n  background-color: var(--light-secondary-color);\n  color: black;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.error {\n  color: red;\n}\n","",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,oCAAoC;EACpC,sCAAsC;EACtC,kCAAkC;EAClC,2CAA2C;EAC3C,iCAAiC;EACjC,yBAAyB;EACzB,iCAAiC;EACjC,yBAAyB;EACzB,+BAA+B;EAC/B,0BAA0B;EAC1B,6BAA6B;EAC7B,qCAAqC;EACrC,mBAAmB;EACnB,wBAAwB;EACxB,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,6BAA6B;EAC7B,iBAAiB;EACjB,oCAAoC;EACpC,SAAS;EACT,UAAU;EACV,aAAa;EACb,sBAAsB;AACxB;;AAEA;EACE,6BAA6B;EAC7B,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,eAAe;EACf,sBAAsB;EACtB,eAAe;EACf,wCAAwC;EACxC,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,8CAA8C;EAC9C,YAAY;AACd;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,UAAU;AACZ",sourcesContent:[":root {\n  --site-font: 'Helvetica', sans-serif;\n  --background-color: rgb(255, 255, 165);\n  --secondary-color: rgb(0, 70, 162);\n  --light-secondary-color: rgb(200, 224, 255);\n  --sunny-color: rgb(255, 255, 165);\n  --sunny-font-color: black;\n  --cloud-color: rgb(165, 204, 255);\n  --cloud-font-color: black;\n  --lowVis-color: rgb(70, 70, 70);\n  --lowVis-font-color: white;\n  --rain-color: rgb(0, 70, 162);\n  --rain-font-color: rgb(200, 224, 255);\n  --snow-color: white;\n  --snow-font-color: black;\n  --thunder-color: black;\n  --thunder-font-color: yellow;\n}\n\nhtml {\n  font-size: 18px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: var(--site-font);\n  min-height: 100vh;\n  background-color: var(--sunny-color);\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n}\n\na {\n  color: var(--secondary-color);\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\nbutton {\n  font-size: 1rem;\n  padding: 0.5rem 1.5rem;\n  cursor: pointer;\n  background-color: var(--secondary-color);\n  color: white;\n  border-radius: 0.2rem;\n}\n\nbutton:hover {\n  background-color: var(--light-secondary-color);\n  color: black;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.error {\n  color: red;\n}\n"],sourceRoot:""}]);const i=c},713:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(537),o=r.n(t),a=r(645),c=r.n(a)()(o());c.push([n.id,"form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n}\n\n.field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\ninput {\n  min-width: 18rem;\n  min-height: 1rem;\n  padding: 0.25rem;\n  font-size: 1rem;\n}\n","",{version:3,sources:["webpack://./src/styles/form.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,sBAAsB;EACtB,mBAAmB;EACnB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,gBAAgB;EAChB,eAAe;AACjB",sourcesContent:["form {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 1rem;\n}\n\n.field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\ninput {\n  min-width: 18rem;\n  min-height: 1rem;\n  padding: 0.25rem;\n  font-size: 1rem;\n}\n"],sourceRoot:""}]);const i=c},176:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(537),o=r.n(t),a=r(645),c=r.n(a)()(o());c.push([n.id,".login {\n  align-self: center;\n  margin: 4rem 1rem 0;\n  height: max-content;\n  padding: 2rem 1.5rem;\n  border-radius: 0.2rem;\n  border: 2px solid var(--secondary-color);\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.login .link {\n  margin-top: 0.5rem;\n  text-align: center;\n}\n","",{version:3,sources:["webpack://./src/styles/login-view.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,mBAAmB;EACnB,mBAAmB;EACnB,oBAAoB;EACpB,qBAAqB;EACrB,wCAAwC;EACxC,uBAAuB;EACvB,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;AACpB",sourcesContent:[".login {\n  align-self: center;\n  margin: 4rem 1rem 0;\n  height: max-content;\n  padding: 2rem 1.5rem;\n  border-radius: 0.2rem;\n  border: 2px solid var(--secondary-color);\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.login .link {\n  margin-top: 0.5rem;\n  text-align: center;\n}\n"],sourceRoot:""}]);const i=c},67:(n,e,r)=>{r.d(e,{Z:()=>i});var t=r(537),o=r.n(t),a=r(645),c=r.n(a)()(o());c.push([n.id,".weather {\n  align-self: stretch;\n  min-height: 100vh;\n  padding: 2rem;\n}\n\n.weather form.search {\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.weather form.search input, .weather form.search button {\n  height: 2rem;\n}\n\n.weather form.search button {\n  padding: 0.25rem 0.5rem;\n}\n\n.weather[data-weather='Sunny'] {\n  background-color: var(--sunny-color);\n  color: var(--sunny-font-color);\n}\n\n.weather[data-weather='Clouds'] {\n  background-color: var(--cloud-color);\n  color: var(--cloud-font-color);\n}\n\n.weather[data-weather='Foggy'],\n.weather[data-weather='Dusty'] {\n  background-color: var(--lowVis-color);\n  color: var(--lowVis-font-color);\n}\n\n.weather[data-weather='Rain'] {\n  background-color: var(--rain-color);\n  color: var(--rain-font-color);\n}\n\n.weather[data-weather='Snow'] {\n  background-color: var(--snow-color);\n  color: var(--snow-font-color);\n}\n\n.weather[data-weather='Thunderstorm'] {\n  background-color: var(--thunder-color);\n  color: var(--thunder-font-color);\n}\n","",{version:3,sources:["webpack://./src/styles/weather-view.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,iBAAiB;EACjB,aAAa;AACf;;AAEA;EACE,mBAAmB;EACnB,qBAAqB;EACrB,uBAAuB;EACvB,WAAW;AACb;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,oCAAoC;EACpC,8BAA8B;AAChC;;AAEA;EACE,oCAAoC;EACpC,8BAA8B;AAChC;;AAEA;;EAEE,qCAAqC;EACrC,+BAA+B;AACjC;;AAEA;EACE,mCAAmC;EACnC,6BAA6B;AAC/B;;AAEA;EACE,mCAAmC;EACnC,6BAA6B;AAC/B;;AAEA;EACE,sCAAsC;EACtC,gCAAgC;AAClC",sourcesContent:[".weather {\n  align-self: stretch;\n  min-height: 100vh;\n  padding: 2rem;\n}\n\n.weather form.search {\n  flex-direction: row;\n  align-items: flex-end;\n  justify-content: center;\n  gap: 0.5rem;\n}\n\n.weather form.search input, .weather form.search button {\n  height: 2rem;\n}\n\n.weather form.search button {\n  padding: 0.25rem 0.5rem;\n}\n\n.weather[data-weather='Sunny'] {\n  background-color: var(--sunny-color);\n  color: var(--sunny-font-color);\n}\n\n.weather[data-weather='Clouds'] {\n  background-color: var(--cloud-color);\n  color: var(--cloud-font-color);\n}\n\n.weather[data-weather='Foggy'],\n.weather[data-weather='Dusty'] {\n  background-color: var(--lowVis-color);\n  color: var(--lowVis-font-color);\n}\n\n.weather[data-weather='Rain'] {\n  background-color: var(--rain-color);\n  color: var(--rain-font-color);\n}\n\n.weather[data-weather='Snow'] {\n  background-color: var(--snow-color);\n  color: var(--snow-font-color);\n}\n\n.weather[data-weather='Thunderstorm'] {\n  background-color: var(--thunder-color);\n  color: var(--thunder-font-color);\n}\n"],sourceRoot:""}]);const i=c},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var r="",t=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),t&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=n(e),t&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(n,r,t,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var c={};if(t)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var l=0;l<n.length;l++){var A=[].concat(n[l]);t&&c[A[0]]||(void 0!==a&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=a),r&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=r):A[2]=r),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},537:n=>{n.exports=function(n){var e=n[1],r=n[3];if(!r)return e;if("function"==typeof btoa){var t=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(t),a="/*# ".concat(o," */"),c=r.sources.map((function(n){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(n," */")}));return[e].concat(c).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function r(n){for(var r=-1,t=0;t<e.length;t++)if(e[t].identifier===n){r=t;break}return r}function t(n,t){for(var a={},c=[],i=0;i<n.length;i++){var s=n[i],l=t.base?s[0]+t.base:s[0],A=a[l]||0,u="".concat(l," ").concat(A);a[l]=A+1;var d=r(u),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==d)e[d].references++,e[d].updater(m);else{var h=o(m,t);t.byIndex=i,e.splice(i,0,{identifier:u,updater:h,references:1})}c.push(u)}return c}function o(n,e){var r=e.domAPI(e);return r.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;r.update(n=e)}else r.remove()}}n.exports=function(n,o){var a=t(n=n||[],o=o||{});return function(n){n=n||[];for(var c=0;c<a.length;c++){var i=r(a[c]);e[i].references--}for(var s=t(n,o),l=0;l<a.length;l++){var A=r(a[l]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}a=s}}},569:n=>{var e={};n.exports=function(n,r){var t=function(n){if(void 0===e[n]){var r=document.querySelector(n);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}(n);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");t.appendChild(r)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,r)=>{n.exports=function(n){var e=r.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(r){!function(n,e,r){var t="";r.supports&&(t+="@supports (".concat(r.supports,") {")),r.media&&(t+="@media ".concat(r.media," {"));var o=void 0!==r.layer;o&&(t+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),t+=r.css,o&&(t+="}"),r.media&&(t+="}"),r.supports&&(t+="}");var a=r.sourceMap;a&&"undefined"!=typeof btoa&&(t+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(t,n,e.options)}(e,n,r)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function r(t){var o=e[t];if(void 0!==o)return o.exports;var a=e[t]={id:t,exports:{}};return n[t](a,a.exports,r),a.exports}r.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return r.d(e,{a:e}),e},r.d=(n,e)=>{for(var t in e)r.o(e,t)&&!r.o(n,t)&&Object.defineProperty(n,t,{enumerable:!0,get:e[t]})},r.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),r.nc=void 0;var t={};(()=>{r.d(t,{S:()=>Y});var n=r(379),e=r.n(n),o=r(795),a=r.n(o),c=r(569),i=r.n(c),s=r(565),l=r.n(s),A=r(216),u=r.n(A),d=r(589),m=r.n(d),h=r(689),f={};f.styleTagTransform=m(),f.setAttributes=l(),f.insert=i().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=u(),e()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var p=r(713),C={};C.styleTagTransform=m(),C.setAttributes=l(),C.insert=i().bind(null,"head"),C.domAPI=a(),C.insertStyleElement=u(),e()(p.Z,C),p.Z&&p.Z.locals&&p.Z.locals;var w=r(176),y={};y.styleTagTransform=m(),y.setAttributes=l(),y.insert=i().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=u(),e()(w.Z,y),w.Z&&w.Z.locals&&w.Z.locals;var g=r(67),E={};E.styleTagTransform=m(),E.setAttributes=l(),E.insert=i().bind(null,"head"),E.domAPI=a(),E.insertStyleElement=u(),e()(g.Z,E),g.Z&&g.Z.locals&&g.Z.locals;const v={},B={temp:1,speed:1,time:1},b=["K","°F","°C"],x=["meter,second","mile,hour"],S=["hr24","hr12"];async function k(n){const e=v.openWeatherMap,r=function(n){return n.replace(" ","+")}(n),t=await fetch(`https://api.openweathermap.org/data/2.5/weather?appid=${e}&q=${r}`);if(401===t.status)throw new Error("Invalid API Key");if(404===t.status)throw new Error("City not found");const{name:o,main:{feels_like:a,temp:c,temp_max:i,temp_min:s},sys:{country:l,sunrise:A,sunset:u},timezone:d,weather:[{main:m,description:h}],wind:{deg:f,speed:p}}=await t.json();return{name:o,country:l,weather:h,weatherKeyword:"Atmosphere"===m?h:m,temp:c,tempMin:s,tempMax:i,tempFeels:a,windSpeed:p,windDirection:f,sunrise:A,sunset:u,timeZoneOffset:d}}function q(n,e){return Number(n).toFixed(e)}function M(n){return n.split(" ").map((n=>n[0].toUpperCase()+n.slice(1))).join(" ")}function Z(n){return q(n,0)}function j(n){return Z(n-273.15)}function $(n){return Z(n+273.15)}function T(n){return Z(5/9*(n-32))}function L(n){return Z(1.8*n+32)}function N(n){return Z(L(j(n)))}function D(n){return Z($(T(n)))}function F(n){return q(n,2)}function z(n){return F(2.237*n)}function I(n){return F(n/2.237)}function K(n){return String(n).padStart(2,"0")}function R(n){const[e,r]=n.split(":");return`${Number(e)}:${r}`}function O(n){const[e,r]=n.split(":").map(Number);let[t,o]=e<=11?["AM",0]:["PM",1];return 0===e&&(o+=12),`${e%13+o}:${K(r)} ${t}`}function P(n){const[e,r]=n.split(" "),[t,o]=e.split(":").map(Number);let a="PM"===r?12:0;return 12===t&&"AM"===r&&(a-=12),`${t+a}:${K(o)}`}function V(n,e){const r=Number(n)+Number(e);return R(new Date(1e3*r).toISOString().slice(11,16))}function U(n,e){return O(V(n,e))}const W={body:{},error:""},Y=W;function H(n,e){["temp","tempMax","tempMin","tempFeels"].forEach((r=>{n[r]=function(n,e,r=b[B.temp]){const t="number"==typeof n?n:Number(n.match(/\d+(\.\d+)?/)[0]);return({"K-°F":N,"K-°C":j,"°F-K":D,"°F-°C":T,"°C-K":$,"°C-°F":L}[`${e}-${r}`]||(n=>n))(t)+r}(n[r],e)}))}function _(n,e){["sunrise","sunset"].forEach((r=>{n[r]=function(n,e,r,t=S[B.time]){return({"unix-hr24":V,"unix-hr12":U,"hr24-hr12":O,"hr12-hr24":P}[`${r}-${t}`]||R)(n,e)}(n[r],n.timeZoneOffset,e)}))}function J(n,e){n.windSpeed=function(n,e,r=x[B.speed]){const t="number"==typeof n?n:Number(n.match(/\d+(\.\d+)?/)[0]),o=({"meter,second-mile,hour":z,"mile,hour-meter,second":I}[`${e}-${r}`]||(n=>n))(t),a=r.split(",");return`${o} ${a[0]}${1===o?"":"s"} per ${a[1]}`}(n.windSpeed,e)}async function X(n,e=k){W.error="";try{const r=await e(n);!function(n){(function(n){!function(n){n.weather=M(n.weather)}(n),function(n){const e=Object.entries({Sunny:["Clear","Clear Sky","Sunny","Sun"],Rain:["Rain","Drizzle","Shower"],Clouds:["Cloud"],Foggy:["Haze","Mist","Smoke","Fog"],Dusty:["Dust","Ash","Sand"],Snow:["Snow","Sleet","Hail"],Thunderstorm:["Thunder","Thunderstorm","Lightning"]});n.weatherKeyword=M(n.weatherKeyword);for(let r=0;r<e.length;r+=1){const[t,o]=e[r];if(o.some((e=>n.weatherKeyword.includes(e))))return void(n.weatherKeyword=t)}}(n)})(n),H(n,"K"),_(n,"unix"),J(n,"meter,second"),function(n){n.windDirection=function(n){const e=n-22.5;return["N","NE","E","SE","S","SW","W","NW"][e>0&&e<315?Math.ceil(e/45):0]}(n.windDirection)}(n)}(r),W.body=r}catch(n){W.error=n.message}return W}const G=document.querySelector(".login"),Q=document.querySelector(".login form"),nn=document.querySelector(".weather"),en=document.querySelector(".weather form.search"),rn=document.querySelector(".weather .error"),tn=document.querySelector("button.settings"),on=document.querySelector("form.settings"),an=document.querySelector(".weather .city"),cn=document.querySelector(".weather .country"),sn=document.querySelector(".weather .main-temperature"),ln=document.querySelector(".weather .main-img"),An=document.querySelector(".weather .main-weather"),un=document.querySelector(".weather .feels-temperature"),dn=document.querySelector(".weather .min-temperature"),mn=document.querySelector(".weather .max-temperature"),hn=document.querySelector(".weather .wind-speed"),fn=document.querySelector(".weather .wind-direction"),pn=document.querySelector(".weather .sunrise"),Cn=document.querySelector(".weather .sunset");function wn(n){const e=n.querySelectorAll(".error"),r=n.querySelectorAll("input");return e.forEach((n=>{n.textContent="",n.classList.add("hidden")})),r.forEach((e=>{if(!e.checkValidity()){const r=n.querySelector(`#${e.id}+.error`);r.textContent=e.validationMessage,r.classList.remove("hidden")}})),n.checkValidity()}async function yn(n){const e=v.giphy,r=await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=${e}&s=${n}`);if(401===r.status)throw new Error("Invalid API Key");return(await r.json()).data.images.original.url}const gn={url:"#"},En=gn;async function vn(n,e=yn){try{gn.url=await e(n)}catch(n){gn.url="#"}return gn}function Bn(){if(rn.textContent="",rn.classList.add("hidden"),Y.error)return rn.textContent=Y.error,void rn.classList.remove("hidden");var n;n=Y.body,nn.dataset.weather=n.weatherKeyword,an.textContent=n.name,cn.textContent=n.country,sn.textContent=n.temp,An.textContent=n.weather,un.textContent=n.tempFeels,dn.textContent=n.tempMin,mn.textContent=n.tempMax,hn.textContent=n.windSpeed,fn.textContent=n.windDirection,pn.textContent=n.sunrise,Cn.textContent=n.sunset,async function(n){await vn(n.weatherKeyword),ln.src=En.url}(Y.body)}Q.addEventListener("submit",(async function(n){var e;n.preventDefault(),wn(Q)&&(e={openWeatherMap:Q.querySelector("#open-weather-map-api-key").value,giphy:Q.querySelector("#giphy-api-key").value},Object.assign(v,e),G.classList.add("hidden"),nn.classList.remove("hidden"),await X("New York City"),Bn())})),en.addEventListener("submit",(async function(n){n.preventDefault(),wn(en)&&(await X(en.querySelector("#location").value),Bn())})),tn.addEventListener("click",(function(n){n.preventDefault(),on.classList.toggle("hidden")})),on.addEventListener("submit",(function(n){if(n.preventDefault(),!wn(on))return;const e={...B};var r;r=Object.fromEntries(new FormData(on).entries()),Object.keys(r).forEach((n=>{B[n]=+r[n]})),function(n){const e=W.body;H(e,b[n.temp]),_(e,S[n.time]),J(e,x[n.speed])}(e),Bn()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,