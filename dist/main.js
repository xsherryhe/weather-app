(()=>{"use strict";var e={689:(e,t,n)=>{n.d(t,{Z:()=>i});var r=n(537),o=n.n(r),a=n(645),c=n.n(a)()(o());c.push([e.id,".hidden {\n  display: none;\n}\n","",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,aAAa;AACf",sourcesContent:[".hidden {\n  display: none;\n}\n"],sourceRoot:""}]);const i=c},645:e=>{e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var n="",r=void 0!==t[5];return t[4]&&(n+="@supports (".concat(t[4],") {")),t[2]&&(n+="@media ".concat(t[2]," {")),r&&(n+="@layer".concat(t[5].length>0?" ".concat(t[5]):""," {")),n+=e(t),r&&(n+="}"),t[2]&&(n+="}"),t[4]&&(n+="}"),n})).join("")},t.i=function(e,n,r,o,a){"string"==typeof e&&(e=[[null,e,void 0]]);var c={};if(r)for(var i=0;i<this.length;i++){var s=this[i][0];null!=s&&(c[s]=!0)}for(var u=0;u<e.length;u++){var d=[].concat(e[u]);r&&c[d[0]]||(void 0!==a&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=a),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),t.push(d))}},t}},537:e=>{e.exports=function(e){var t=e[1],n=e[3];if(!n)return t;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),c=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[t].concat(c).concat([a]).join("\n")}return[t].join("\n")}},379:e=>{var t=[];function n(e){for(var n=-1,r=0;r<t.length;r++)if(t[r].identifier===e){n=r;break}return n}function r(e,r){for(var a={},c=[],i=0;i<e.length;i++){var s=e[i],u=r.base?s[0]+r.base:s[0],d=a[u]||0,p="".concat(u," ").concat(d);a[u]=d+1;var l=n(p),m={css:s[1],media:s[2],sourceMap:s[3],supports:s[4],layer:s[5]};if(-1!==l)t[l].references++,t[l].updater(m);else{var f=o(m,r);r.byIndex=i,t.splice(i,0,{identifier:p,updater:f,references:1})}c.push(p)}return c}function o(e,t){var n=t.domAPI(t);return n.update(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap&&t.supports===e.supports&&t.layer===e.layer)return;n.update(e=t)}else n.remove()}}e.exports=function(e,o){var a=r(e=e||[],o=o||{});return function(e){e=e||[];for(var c=0;c<a.length;c++){var i=n(a[c]);t[i].references--}for(var s=r(e,o),u=0;u<a.length;u++){var d=n(a[u]);0===t[d].references&&(t[d].updater(),t.splice(d,1))}a=s}}},569:e=>{var t={};e.exports=function(e,n){var r=function(e){if(void 0===t[e]){var n=document.querySelector(e);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(e){n=null}t[e]=n}return t[e]}(e);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:e=>{e.exports=function(e){var t=document.createElement("style");return e.setAttributes(t,e.attributes),e.insert(t,e.options),t}},565:(e,t,n)=>{e.exports=function(e){var t=n.nc;t&&e.setAttribute("nonce",t)}},795:e=>{e.exports=function(e){var t=e.insertStyleElement(e);return{update:function(n){!function(e,t,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var a=n.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),t.styleTagTransform(r,e,t.options)}(t,e,n)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)}}}},589:e=>{e.exports=function(e,t){if(t.styleSheet)t.styleSheet.cssText=e;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(e))}}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={id:r,exports:{}};return e[r](a,a.exports,n),a.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.nc=void 0;var r={};(()=>{n.d(r,{p:()=>_});var e=n(379),t=n.n(e),o=n(795),a=n.n(o),c=n(569),i=n.n(c),s=n(565),u=n.n(s),d=n(216),p=n.n(d),l=n(589),m=n.n(l),f=n(689),h={};h.styleTagTransform=m(),h.setAttributes=u(),h.insert=i().bind(null,"head"),h.domAPI=a(),h.insertStyleElement=p(),t()(f.Z,h),f.Z&&f.Z.locals&&f.Z.locals;const y={},v=["K","째F","째C"],w=["meter,second","mile,hour"],S=["hr24","hr12"],x=document.querySelector(".login"),b=document.querySelector(".login form"),g=document.querySelector(".weather"),C=document.querySelector(".weather .error"),q=document.querySelector(".weather .city"),M=document.querySelector(".weather .country"),A=document.querySelector(".weather .main-temperature"),E=document.querySelector(".weather .main-weather"),N=document.querySelector(".weather .feels-temperature"),L=document.querySelector(".weather .min-temperature"),$=document.querySelector(".weather .max-temperature"),I=document.querySelector(".weather .wind-speed"),j=document.querySelector(".weather .wind-direction"),T=document.querySelector(".weather .sunrise"),k=document.querySelector(".weather .sunset");async function F(e){const t=y.openWeatherMap,n=function(e){return e.replace(" ","+")}(e),r=await fetch(`https://api.openweathermap.org/data/2.5/weather?appid=${t}&q=${n}`);if(401===r.status)throw new Error("Invalid API Key");const{name:o,main:{feels_like:a,temp:c,temp_max:i,temp_min:s},sys:{country:u,sunrise:d,sunset:p},timezone:l,weather:[{description:m}],wind:{deg:f,speed:h}}=await r.json();return{name:o,country:u,weather:m,temp:c,tempMin:s,tempMax:i,tempFeels:a,windSpeed:h,windDirection:f,sunrise:d,sunset:p,timeZoneOffset:l}}function O(e,t){return Number(e).toFixed(t)}function D(e){return O(e,0)}function R(e){return D(e-273.15)}function Z(e){return D(function(e){return D(1.8*e+32)}(R(e)))}function P(e){return function(e){return O(e,2)}(2.237*e)}function U(e){return e.split(":").map(Number).join(":")}function W(e){const[t,n]=e.split(":").map(Number);let[r,o]=t<=11?["AM",0]:["PM",1];return 0===t&&(o+=12),`${t%13+o}:${n} ${r}`}async function _(e,t=F){const n={};try{const r=await t(e);(function(e){["temp","tempMax","tempMin","tempFeels"].forEach((t=>{e[t]=function(e){const t=v[1];return(0,{K:e=>e,"째F":Z,"째C":R}[t])(Number(e))+t}(e[t])})),["sunrise","sunset"].forEach((t=>{e[t]=function(e,t){const n=new Date(1e3*(Number(e)+Number(t))).toISOString().slice(11,16);return(0,{hr24:U,hr12:W}[S[1]])(n)}(e[t],e.timeZoneOffset)})),e.windSpeed=function(e){const t=w[1],n=(0,{"meter,second":e=>e,"mile,hour":P}[t])(Number(e)),r=t.split(",");return`${n} ${r[0]}${1===n?"":"s"} per ${r[1]}`}(e.windSpeed),e.windDirection=function(e){const t=e-22.5;return["N","NE","E","SE","S","SW","W","NW"][t>0&&t<315?Math.ceil(t/45):0]}(e.windDirection)})(r),n.body=r}catch(e){n.error=e.message}return n}b.addEventListener("submit",(function(e){e.preventDefault(),function(e){const t=e.querySelectorAll(".error"),n=e.querySelectorAll("input");return t.forEach((e=>{e.textContent="",e.classList.add("hidden")})),n.forEach((t=>{if(!t.checkValidity()){const n=e.querySelector(`#${t.id}+.error`);n.textContent=t.validationMessage,n.classList.remove("hidden")}})),e.checkValidity()}(b)&&(y.openWeatherMap=b.querySelector("#open-weather-map-api-key").value,y.giphy=b.querySelector("#giphy-api-key").value,x.classList.add("hidden"),g.classList.remove("hidden"),async function(e="New York City"){C.textContent="",C.classList.add("hidden");const t=await _(e);if(t.error)return C.textContent=`Something went wrong: ${t.error}`,void C.classList.remove("hidden");var n;n=t.body,q.textContent=n.name,M.textContent=n.country,A.textContent=n.temp,E.textContent=n.weather,N.textContent=n.tempFeels,L.textContent=n.tempMin,$.textContent=n.tempMax,I.textContent=n.windSpeed,j.textContent=n.windDirection,T.textContent=n.sunrise,k.textContent=n.sunset}())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,