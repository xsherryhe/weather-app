(()=>{"use strict";var n={689:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,":root {\n  --site-font: 'Helvetica', sans-serif;\n  --background-color: rgb(255, 255, 165);\n  --secondary-color: rgb(0, 70, 162);\n  --light-secondary-color: rgb(200, 224, 255);\n  --sunny-color: rgb(255, 255, 165);\n  --sunny-font-color: black;\n  --cloud-color: rgb(165, 204, 255);\n  --cloud-font-color: black;\n  --lowVis-color: rgb(70, 70, 70);\n  --lowVis-font-color: white;\n  --rain-color: rgb(0, 70, 162);\n  --rain-font-color: rgb(200, 224, 255);\n  --snow-color: white;\n  --snow-font-color: black;\n  --thunder-color: black;\n  --thunder-font-color: yellow;\n}\n\nhtml {\n  font-size: 18px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: var(--site-font);\n  min-height: 100vh;\n  background-color: var(--sunny-color);\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\na {\n  color: var(--secondary-color);\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\nbutton {\n  font-size: 1rem;\n  padding: 0.5rem 1.5rem;\n  cursor: pointer;\n  background-color: var(--secondary-color);\n  color: white;\n  border-radius: 0.2rem;\n}\n\nbutton:hover {\n  background-color: var(--light-secondary-color);\n  color: black;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.error {\n  color: red;\n}\n","",{version:3,sources:["webpack://./src/styles/all.css"],names:[],mappings:"AAAA;EACE,oCAAoC;EACpC,sCAAsC;EACtC,kCAAkC;EAClC,2CAA2C;EAC3C,iCAAiC;EACjC,yBAAyB;EACzB,iCAAiC;EACjC,yBAAyB;EACzB,+BAA+B;EAC/B,0BAA0B;EAC1B,6BAA6B;EAC7B,qCAAqC;EACrC,mBAAmB;EACnB,wBAAwB;EACxB,sBAAsB;EACtB,4BAA4B;AAC9B;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,sBAAsB;AACxB;;AAEA;EACE,6BAA6B;EAC7B,iBAAiB;EACjB,oCAAoC;EACpC,SAAS;EACT,UAAU;EACV,aAAa;EACb,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,6BAA6B;EAC7B,qBAAqB;AACvB;;AAEA;EACE,0BAA0B;AAC5B;;AAEA;EACE,eAAe;EACf,sBAAsB;EACtB,eAAe;EACf,wCAAwC;EACxC,YAAY;EACZ,qBAAqB;AACvB;;AAEA;EACE,8CAA8C;EAC9C,YAAY;AACd;;AAEA;EACE,wBAAwB;AAC1B;;AAEA;EACE,UAAU;AACZ",sourcesContent:[":root {\n  --site-font: 'Helvetica', sans-serif;\n  --background-color: rgb(255, 255, 165);\n  --secondary-color: rgb(0, 70, 162);\n  --light-secondary-color: rgb(200, 224, 255);\n  --sunny-color: rgb(255, 255, 165);\n  --sunny-font-color: black;\n  --cloud-color: rgb(165, 204, 255);\n  --cloud-font-color: black;\n  --lowVis-color: rgb(70, 70, 70);\n  --lowVis-font-color: white;\n  --rain-color: rgb(0, 70, 162);\n  --rain-font-color: rgb(200, 224, 255);\n  --snow-color: white;\n  --snow-font-color: black;\n  --thunder-color: black;\n  --thunder-font-color: yellow;\n}\n\nhtml {\n  font-size: 18px;\n}\n\n* {\n  box-sizing: border-box;\n}\n\nbody {\n  font-family: var(--site-font);\n  min-height: 100vh;\n  background-color: var(--sunny-color);\n  margin: 0;\n  padding: 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n}\n\na {\n  color: var(--secondary-color);\n  text-decoration: none;\n}\n\na:hover {\n  text-decoration: underline;\n}\n\nbutton {\n  font-size: 1rem;\n  padding: 0.5rem 1.5rem;\n  cursor: pointer;\n  background-color: var(--secondary-color);\n  color: white;\n  border-radius: 0.2rem;\n}\n\nbutton:hover {\n  background-color: var(--light-secondary-color);\n  color: black;\n}\n\n.hidden {\n  display: none !important;\n}\n\n.error {\n  color: red;\n}\n"],sourceRoot:""}]);const c=i},713:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,"form {\n  display: grid;\n  justify-items: center;\n  align-items: center;\n  row-gap: 1rem;\n}\n\n.field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\ninput, select {\n  min-width: 18rem;\n  min-height: 1rem;\n  padding: 0.25rem;\n  font-size: 1rem;\n}\n\nselect {\n  cursor: pointer;\n}\n","",{version:3,sources:["webpack://./src/styles/form.css"],names:[],mappings:"AAAA;EACE,aAAa;EACb,qBAAqB;EACrB,mBAAmB;EACnB,aAAa;AACf;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,WAAW;AACb;;AAEA;EACE,gBAAgB;EAChB,gBAAgB;EAChB,gBAAgB;EAChB,eAAe;AACjB;;AAEA;EACE,eAAe;AACjB",sourcesContent:["form {\n  display: grid;\n  justify-items: center;\n  align-items: center;\n  row-gap: 1rem;\n}\n\n.field {\n  display: flex;\n  flex-direction: column;\n  gap: 0.1rem;\n}\n\ninput, select {\n  min-width: 18rem;\n  min-height: 1rem;\n  padding: 0.25rem;\n  font-size: 1rem;\n}\n\nselect {\n  cursor: pointer;\n}\n"],sourceRoot:""}]);const c=i},176:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".login {\n  margin: 4rem 1rem 0;\n  height: max-content;\n  padding: 2rem 1.5rem;\n  border-radius: 0.2rem;\n  border: 2px solid var(--secondary-color);\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.login .link {\n  margin-top: 0.5rem;\n  text-align: center;\n}\n\n.login .loading {\n  color: var(--secondary-color);\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n}\n\n.login .loading-img {\n  width: 1.5rem;\n}\n","",{version:3,sources:["webpack://./src/styles/login-view.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,mBAAmB;EACnB,oBAAoB;EACpB,qBAAqB;EACrB,wCAAwC;EACxC,uBAAuB;EACvB,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,kBAAkB;AACpB;;AAEA;EACE,6BAA6B;EAC7B,aAAa;EACb,WAAW;EACX,mBAAmB;AACrB;;AAEA;EACE,aAAa;AACf",sourcesContent:[".login {\n  margin: 4rem 1rem 0;\n  height: max-content;\n  padding: 2rem 1.5rem;\n  border-radius: 0.2rem;\n  border: 2px solid var(--secondary-color);\n  background-color: white;\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.login .link {\n  margin-top: 0.5rem;\n  text-align: center;\n}\n\n.login .loading {\n  color: var(--secondary-color);\n  display: flex;\n  gap: 0.5rem;\n  align-items: center;\n}\n\n.login .loading-img {\n  width: 1.5rem;\n}\n"],sourceRoot:""}]);const c=i},607:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".settings {\n  position: absolute;\n  z-index: 1;\n  min-height: 100vh;\n  width: 100%;\n  padding: 2rem;\n  background-color: rgba(0, 0, 0, 0.75);\n  display: flex;\n  justify-content: center;\n  align-items: start;\n}\n\n.settings form {\n  background-color: white;\n  margin: 4rem 0;\n  min-width: 45vw;\n  padding: 0.5rem 0.5rem 1.5rem;\n  border-radius: 0.2rem;\n  border: 2px solid var(--secondary-color);\n}\n\n.settings .hide {\n  justify-self: end;\n  padding: 0.25rem;\n  height: 2rem;\n  width: 2rem;\n  font-weight: 900;\n}\n","",{version:3,sources:["webpack://./src/styles/settings-view.css"],names:[],mappings:"AAAA;EACE,kBAAkB;EAClB,UAAU;EACV,iBAAiB;EACjB,WAAW;EACX,aAAa;EACb,qCAAqC;EACrC,aAAa;EACb,uBAAuB;EACvB,kBAAkB;AACpB;;AAEA;EACE,uBAAuB;EACvB,cAAc;EACd,eAAe;EACf,6BAA6B;EAC7B,qBAAqB;EACrB,wCAAwC;AAC1C;;AAEA;EACE,iBAAiB;EACjB,gBAAgB;EAChB,YAAY;EACZ,WAAW;EACX,gBAAgB;AAClB",sourcesContent:[".settings {\n  position: absolute;\n  z-index: 1;\n  min-height: 100vh;\n  width: 100%;\n  padding: 2rem;\n  background-color: rgba(0, 0, 0, 0.75);\n  display: flex;\n  justify-content: center;\n  align-items: start;\n}\n\n.settings form {\n  background-color: white;\n  margin: 4rem 0;\n  min-width: 45vw;\n  padding: 0.5rem 0.5rem 1.5rem;\n  border-radius: 0.2rem;\n  border: 2px solid var(--secondary-color);\n}\n\n.settings .hide {\n  justify-self: end;\n  padding: 0.25rem;\n  height: 2rem;\n  width: 2rem;\n  font-weight: 900;\n}\n"],sourceRoot:""}]);const c=i},67:(n,e,t)=>{t.d(e,{Z:()=>c});var r=t(537),o=t.n(r),a=t(645),i=t.n(a)()(o());i.push([n.id,".weather {\n  align-self: stretch;\n  min-height: 100vh;\n  padding: 2rem;\n  display: flex;\n  justify-content: center;\n}\n\n.weather-container {\n  width: max-content;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.weather form.search {\n  align-self: center;\n  grid-template: 1.2rem 2rem max-content / repeat(3, max-content);\n  column-gap: 0.5rem;\n  row-gap: 0;\n}\n\n.weather form.search .field {\n  grid-row: 1 / span 3;\n}\n\n.weather form.search input {\n  height: 2rem;\n}\n\n.weather form.search button {\n  padding: 0.25rem 0.5rem;\n}\n\n.weather form.search button[type=\"submit\"] {\n  grid-row: 2;\n  grid-column: 2;\n}\n\n.weather form.search button.show-settings {\n  grid-row: 2;\n  grid-column: 3;\n}\n\n.weather .loading {\n  margin-top: 5rem;\n  color: var(--secondary-color);\n  font-size: 3rem;\n  display: flex;\n  gap: 0.5rem;\n  justify-content: center;\n  align-items: center;\n}\n\n.weather .loading-img {\n  width: 5rem;\n}\n\n.weather .weather-body {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.weather .weather-body .main {\n  display: flex;\n  align-items: center;\n  gap: 2rem;\n  justify-content: space-between;\n}\n\n.weather .weather-body .main-img-container {\n  width: 30vw;\n  display: flex;\n  justify-content: center;\n}\n\n.weather .weather-body .main-img {\n  object-fit: cover;\n  width: 30vw;\n}\n\n.weather .weather-body .main-info {\n  font-size: 3rem;\n}\n\n.weather .weather-body .details {\n  display: grid;\n  grid-template: repeat(2, max-content) / repeat(2, max-content);\n  justify-content: space-evenly;\n  column-gap: 1rem;\n}\n\n.weather .weather-body .temperatures {\n  grid-row: 1 / span 2;\n}\n\n.weather[data-weather='Sunny'] {\n  background-color: var(--sunny-color);\n  color: var(--sunny-font-color);\n}\n\n.weather[data-weather='Clouds'] {\n  background-color: var(--cloud-color);\n  color: var(--cloud-font-color);\n}\n\n.weather[data-weather='Foggy'],\n.weather[data-weather='Dusty'] {\n  background-color: var(--lowVis-color);\n  color: var(--lowVis-font-color);\n}\n\n.weather[data-weather='Rain'] {\n  background-color: var(--rain-color);\n  color: var(--rain-font-color);\n}\n\n.weather[data-weather='Snow'] {\n  background-color: var(--snow-color);\n  color: var(--snow-font-color);\n}\n\n.weather[data-weather='Thunderstorm'] {\n  background-color: var(--thunder-color);\n  color: var(--thunder-font-color);\n}\n","",{version:3,sources:["webpack://./src/styles/weather-view.css"],names:[],mappings:"AAAA;EACE,mBAAmB;EACnB,iBAAiB;EACjB,aAAa;EACb,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,kBAAkB;EAClB,+DAA+D;EAC/D,kBAAkB;EAClB,UAAU;AACZ;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,WAAW;EACX,cAAc;AAChB;;AAEA;EACE,WAAW;EACX,cAAc;AAChB;;AAEA;EACE,gBAAgB;EAChB,6BAA6B;EAC7B,eAAe;EACf,aAAa;EACb,WAAW;EACX,uBAAuB;EACvB,mBAAmB;AACrB;;AAEA;EACE,WAAW;AACb;;AAEA;EACE,aAAa;EACb,sBAAsB;EACtB,SAAS;AACX;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,SAAS;EACT,8BAA8B;AAChC;;AAEA;EACE,WAAW;EACX,aAAa;EACb,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;EACjB,WAAW;AACb;;AAEA;EACE,eAAe;AACjB;;AAEA;EACE,aAAa;EACb,8DAA8D;EAC9D,6BAA6B;EAC7B,gBAAgB;AAClB;;AAEA;EACE,oBAAoB;AACtB;;AAEA;EACE,oCAAoC;EACpC,8BAA8B;AAChC;;AAEA;EACE,oCAAoC;EACpC,8BAA8B;AAChC;;AAEA;;EAEE,qCAAqC;EACrC,+BAA+B;AACjC;;AAEA;EACE,mCAAmC;EACnC,6BAA6B;AAC/B;;AAEA;EACE,mCAAmC;EACnC,6BAA6B;AAC/B;;AAEA;EACE,sCAAsC;EACtC,gCAAgC;AAClC",sourcesContent:[".weather {\n  align-self: stretch;\n  min-height: 100vh;\n  padding: 2rem;\n  display: flex;\n  justify-content: center;\n}\n\n.weather-container {\n  width: max-content;\n  display: flex;\n  flex-direction: column;\n  gap: 2rem;\n}\n\n.weather form.search {\n  align-self: center;\n  grid-template: 1.2rem 2rem max-content / repeat(3, max-content);\n  column-gap: 0.5rem;\n  row-gap: 0;\n}\n\n.weather form.search .field {\n  grid-row: 1 / span 3;\n}\n\n.weather form.search input {\n  height: 2rem;\n}\n\n.weather form.search button {\n  padding: 0.25rem 0.5rem;\n}\n\n.weather form.search button[type=\"submit\"] {\n  grid-row: 2;\n  grid-column: 2;\n}\n\n.weather form.search button.show-settings {\n  grid-row: 2;\n  grid-column: 3;\n}\n\n.weather .loading {\n  margin-top: 5rem;\n  color: var(--secondary-color);\n  font-size: 3rem;\n  display: flex;\n  gap: 0.5rem;\n  justify-content: center;\n  align-items: center;\n}\n\n.weather .loading-img {\n  width: 5rem;\n}\n\n.weather .weather-body {\n  display: flex;\n  flex-direction: column;\n  gap: 1rem;\n}\n\n.weather .weather-body .main {\n  display: flex;\n  align-items: center;\n  gap: 2rem;\n  justify-content: space-between;\n}\n\n.weather .weather-body .main-img-container {\n  width: 30vw;\n  display: flex;\n  justify-content: center;\n}\n\n.weather .weather-body .main-img {\n  object-fit: cover;\n  width: 30vw;\n}\n\n.weather .weather-body .main-info {\n  font-size: 3rem;\n}\n\n.weather .weather-body .details {\n  display: grid;\n  grid-template: repeat(2, max-content) / repeat(2, max-content);\n  justify-content: space-evenly;\n  column-gap: 1rem;\n}\n\n.weather .weather-body .temperatures {\n  grid-row: 1 / span 2;\n}\n\n.weather[data-weather='Sunny'] {\n  background-color: var(--sunny-color);\n  color: var(--sunny-font-color);\n}\n\n.weather[data-weather='Clouds'] {\n  background-color: var(--cloud-color);\n  color: var(--cloud-font-color);\n}\n\n.weather[data-weather='Foggy'],\n.weather[data-weather='Dusty'] {\n  background-color: var(--lowVis-color);\n  color: var(--lowVis-font-color);\n}\n\n.weather[data-weather='Rain'] {\n  background-color: var(--rain-color);\n  color: var(--rain-font-color);\n}\n\n.weather[data-weather='Snow'] {\n  background-color: var(--snow-color);\n  color: var(--snow-font-color);\n}\n\n.weather[data-weather='Thunderstorm'] {\n  background-color: var(--thunder-color);\n  color: var(--thunder-font-color);\n}\n"],sourceRoot:""}]);const c=i},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",r=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),r&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),r&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,r,o,a){"string"==typeof n&&(n=[[null,n,void 0]]);var i={};if(r)for(var c=0;c<this.length;c++){var A=this[c][0];null!=A&&(i[A]=!0)}for(var s=0;s<n.length;s++){var l=[].concat(n[s]);r&&i[l[0]]||(void 0!==a&&(void 0===l[5]||(l[1]="@layer".concat(l[5].length>0?" ".concat(l[5]):""," {").concat(l[1],"}")),l[5]=a),t&&(l[2]?(l[1]="@media ".concat(l[2]," {").concat(l[1],"}"),l[2]=t):l[2]=t),o&&(l[4]?(l[1]="@supports (".concat(l[4],") {").concat(l[1],"}"),l[4]=o):l[4]="".concat(o)),e.push(l))}},e}},537:n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),a="/*# ".concat(o," */"),i=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(i).concat([a]).join("\n")}return[e].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var a={},i=[],c=0;c<n.length;c++){var A=n[c],s=r.base?A[0]+r.base:A[0],l=a[s]||0,d="".concat(s," ").concat(l);a[s]=l+1;var u=t(d),m={css:A[1],media:A[2],sourceMap:A[3],supports:A[4],layer:A[5]};if(-1!==u)e[u].references++,e[u].updater(m);else{var h=o(m,r);r.byIndex=c,e.splice(c,0,{identifier:d,updater:h,references:1})}i.push(d)}return i}function o(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var a=r(n=n||[],o=o||{});return function(n){n=n||[];for(var i=0;i<a.length;i++){var c=t(a[i]);e[c].references--}for(var A=r(n,o),s=0;s<a.length;s++){var l=t(a[s]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}a=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r="";t.supports&&(r+="@supports (".concat(t.supports,") {")),t.media&&(r+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(r+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),r+=t.css,o&&(r+="}"),t.media&&(r+="}"),t.supports&&(r+="}");var a=t.sourceMap;a&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleTagTransform(r,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var o=e[r];if(void 0!==o)return o.exports;var a=e[r]={id:r,exports:{}};return n[r](a,a.exports,t),a.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var r=e.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.nc=void 0;var r={};(()=>{t.d(r,{S:()=>H}),t.p;var n=t(379),e=t.n(n),o=t(795),a=t.n(o),i=t(569),c=t.n(i),A=t(565),s=t.n(A),l=t(216),d=t.n(l),u=t(589),m=t.n(u),h=t(689),p={};p.styleTagTransform=m(),p.setAttributes=s(),p.insert=c().bind(null,"head"),p.domAPI=a(),p.insertStyleElement=d(),e()(h.Z,p),h.Z&&h.Z.locals&&h.Z.locals;var C=t(713),f={};f.styleTagTransform=m(),f.setAttributes=s(),f.insert=c().bind(null,"head"),f.domAPI=a(),f.insertStyleElement=d(),e()(C.Z,f),C.Z&&C.Z.locals&&C.Z.locals;var g=t(176),w={};w.styleTagTransform=m(),w.setAttributes=s(),w.insert=c().bind(null,"head"),w.domAPI=a(),w.insertStyleElement=d(),e()(g.Z,w),g.Z&&g.Z.locals&&g.Z.locals;var E=t(607),y={};y.styleTagTransform=m(),y.setAttributes=s(),y.insert=c().bind(null,"head"),y.domAPI=a(),y.insertStyleElement=d(),e()(E.Z,y),E.Z&&E.Z.locals&&E.Z.locals;var B=t(67),b={};b.styleTagTransform=m(),b.setAttributes=s(),b.insert=c().bind(null,"head"),b.domAPI=a(),b.insertStyleElement=d(),e()(B.Z,b),B.Z&&B.Z.locals&&B.Z.locals;const v={},x={temp:1,speed:1,time:1},S=["K","°F","°C"],k=["meter,second","mile,hour"],q=["hr24","hr12"];async function j(n,e=v.openWeatherMap){const t=function(n){return n.replace(" ","+")}(n),r=await fetch(`https://api.openweathermap.org/data/2.5/weather?appid=${e}&q=${t}`);if(401===r.status)throw new Error("Invalid API Key");if(404===r.status)throw new Error("City not found");const{name:o,main:{feels_like:a,temp:i,temp_max:c,temp_min:A},sys:{country:s,sunrise:l,sunset:d},timezone:u,weather:[{main:m,description:h}],wind:{deg:p,speed:C}}=await r.json();return{name:o,country:s,weather:h,weatherKeyword:"Atmosphere"===m?h:m,temp:i,tempMin:A,tempMax:c,tempFeels:a,windSpeed:C,windDirection:p,sunrise:l,sunset:d,timeZoneOffset:u}}function L(n,e){return Number(n).toFixed(e)}function Z(n){return n.split(" ").map((n=>n[0].toUpperCase()+n.slice(1))).join(" ")}function T(n){return L(n,0)}function W(n){return T(n-273.15)}function $(n){return T(n+273.15)}function M(n){return T(5/9*(n-32))}function z(n){return T(1.8*n+32)}function D(n){return T(z(W(n)))}function N(n){return T($(M(n)))}function I(n){return L(n,2)}function F(n){return I(2.237*n)}function P(n){return I(n/2.237)}function R(n){return String(n).padStart(2,"0")}function V(n){const[e,t]=n.split(":");return`${Number(e)}:${t}`}function K(n){const[e,t]=n.split(":").map(Number);let[r,o]=e<=11?["AM",0]:["PM",1];return 0===e&&(o+=12),`${e%13+o}:${R(t)} ${r}`}function U(n){const[e,t]=n.split(" "),[r,o]=e.split(":").map(Number);let a="PM"===t?12:0;return 12===r&&"AM"===t&&(a-=12),`${r+a}:${R(o)}`}function O(n,e){const t=Number(n)+Number(e);return V(new Date(1e3*t).toISOString().slice(11,16))}function X(n,e){return K(O(n,e))}const Y={body:{},error:""},H=Y;function _(n,e){["temp","tempMax","tempMin","tempFeels"].forEach((t=>{const r=n[t];r&&(n[t]=function(n,e,t=S[x.temp]){const r="number"==typeof n?n:Number(n.match(/\d+(\.\d+)?/)[0]);return({"K-°F":D,"K-°C":W,"°F-K":N,"°F-°C":M,"°C-K":$,"°C-°F":z}[`${e}-${t}`]||(n=>n))(r)+t}(r,e))}))}function J(n,e){["sunrise","sunset"].forEach((t=>{const r=n[t];r&&(n[t]=function(n,e,t,r=q[x.time]){return({"unix-hr24":O,"unix-hr12":X,"hr24-hr12":K,"hr12-hr24":U}[`${t}-${r}`]||V)(n,e)}(r,n.timeZoneOffset||0,e))}))}function G(n,e){const t=n.windSpeed;t&&(n.windSpeed=function(n,e,t=k[x.speed]){const r="number"==typeof n?n:Number(n.match(/\d+(\.\d+)?/)[0]),o=({"meter,second-mile,hour":F,"mile,hour-meter,second":P}[`${e}-${t}`]||(n=>n))(r),a=t.split(",");return`${o} ${a[0]}${1===o?"":"s"} per ${a[1]}`}(t,e))}async function Q(n,e=j){Y.error="";try{const t=await e(n);!function(n){(function(n){!function(n){const e=n.weather;e&&(n.weather=Z(e))}(n),function(n){const e=Object.entries({Sunny:["Clear","Clear Sky","Sunny","Sun"],Rain:["Rain","Drizzle","Shower"],Clouds:["Cloud"],Foggy:["Haze","Mist","Smoke","Fog"],Dusty:["Dust","Ash","Sand"],Snow:["Snow","Sleet","Hail"],Thunderstorm:["Thunder","Thunderstorm","Lightning"]});let t=n.weatherKeyword;if(t){t=Z(t),n.weatherKeyword=t;for(let r=0;r<e.length;r+=1){const[o,a]=e[r];if(a.some((n=>t.includes(n))))return void(n.weatherKeyword=o)}}}(n)})(n),_(n,"K"),J(n,"unix"),G(n,"meter,second"),function(n){const e=n.windDirection;e&&(n.windDirection=function(n){const e=n-22.5;return["N","NE","E","SE","S","SW","W","NW"][e>0&&e<315?Math.ceil(e/45):0]}(e))}(n)}(t),Y.body=t}catch(n){Y.error=n.message}return Y}const nn=document.querySelector(".login"),en=document.querySelector(".login form"),tn=document.querySelector('.login form button[type="submit"]'),rn=document.querySelector(".login .loading"),on=document.querySelector(".weather"),an=document.querySelector(".weather form.search"),cn=document.querySelector(".weather .error"),An=document.querySelector(".weather .loading"),sn=document.querySelector(".weather .weather-body"),ln=document.querySelector("button.show-settings"),dn=document.querySelector(".settings"),un=document.querySelector(".settings form"),mn=document.querySelector(".settings .hide"),hn=document.querySelector(".weather .city"),pn=document.querySelector(".weather .country"),Cn=document.querySelector(".weather .main-temperature"),fn=document.querySelector(".weather .main-img"),gn=document.querySelector(".weather .main-img-container .loading-img"),wn=document.querySelector(".weather .main-weather"),En=document.querySelector(".weather .feels-temperature"),yn=document.querySelector(".weather .min-temperature"),Bn=document.querySelector(".weather .max-temperature"),bn=document.querySelector(".weather .wind-speed"),vn=document.querySelector(".weather .wind-direction"),xn=document.querySelector(".weather .sunrise"),Sn=document.querySelector(".weather .sunset");async function kn(n,e=v.giphy){const t=await fetch(`https://api.giphy.com/v1/gifs/translate?api_key=${e}&s=${n}`);if(401===t.status)throw new Error("Invalid API Key");return(await t.json()).data.images.original.url}async function qn(n){const e=n.querySelectorAll(".error"),t=[...n.querySelectorAll("input")];return function(n,e){n.forEach((n=>n.setCustomValidity(""))),e.forEach((n=>{n.textContent="",n.classList.add("hidden")}))}(t,e),await Promise.all(t.map((n=>n.id.includes("api-key")?async function(n){if(!n.checkValidity())return;const[e,t]={"open-weather-map":[j,["New York"]],giphy:[kn,["cats"]]}[n.id.replace("-api-key","")];if(e)try{await e(...t,n.value)}catch(e){n.setCustomValidity(e.message)}}(n):Promise.resolve()))),t.forEach((e=>{if(!e.checkValidity()){const t=n.querySelector(`#${e.id}+.error`);t.textContent=e.validationMessage,t.classList.remove("hidden")}})),n.checkValidity()}const jn={url:"#"},Ln=jn;function Zn(){nn.classList.add("hidden"),dn.classList.add("hidden"),on.classList.remove("hidden"),cn.textContent="",cn.classList.add("hidden"),An.classList.add("hidden"),sn.classList.remove("hidden")}function Tn({withImage:n=!0}={}){if(Zn(),H.error)return cn.textContent=H.error,void cn.classList.remove("hidden");var e;e=H.body,on.dataset.weather=e.weatherKeyword,hn.textContent=e.name,pn.textContent=e.country,Cn.textContent=e.temp,wn.textContent=e.weather,En.textContent=e.tempFeels,yn.textContent=e.tempMin,Bn.textContent=e.tempMax,bn.textContent=e.windSpeed,vn.textContent=e.windDirection,xn.textContent=e.sunrise,Sn.textContent=e.sunset,n&&async function(n){gn.classList.remove("hidden"),fn.classList.add("hidden"),await async function(n,e=kn){try{jn.url=await e(n)}catch(n){jn.url="#"}return jn}(n.weatherKeyword),fn.src=Ln.url,gn.classList.add("hidden"),fn.classList.remove("hidden")}(H.body)}en.addEventListener("submit",(async function(n){if(n.preventDefault(),rn.classList.remove("hidden"),tn.classList.add("hidden"),!await qn(en))return nn.classList.remove("hidden"),tn.classList.remove("hidden"),void rn.classList.add("hidden");var e;e={openWeatherMap:en.querySelector("#open-weather-map-api-key").value,giphy:en.querySelector("#giphy-api-key").value},Object.assign(v,e),Zn(),await Q("New York City"),Tn()})),an.addEventListener("submit",(async function(n){n.preventDefault(),An.classList.remove("hidden"),sn.classList.add("hidden"),await qn(an)&&(await Q(an.querySelector("#location").value),Tn())})),ln.addEventListener("click",(function(n){n.preventDefault(),dn.classList.remove("hidden")})),un.addEventListener("submit",(async function(n){if(n.preventDefault(),!await qn(un))return;const e={...x};var t;t=Object.fromEntries(new FormData(un).entries()),Object.keys(t).forEach((n=>{x[n]=+t[n]})),function(n){const e=Y.body;_(e,S[n.temp]),J(e,q[n.time]),G(e,k[n.speed])}(e),Tn({withImage:!1})})),mn.addEventListener("click",(function(n){n.preventDefault(),Zn()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,