(()=>{"use strict";const e={},n=["K","°F","°C"],t=["meter,second","mile,hour"],r=["hr24","hr12"];async function o(n){const t=e.openWeatherMap||prompt("Enter Open Weather Map API Key"),r=function(e){return e.replace(" ","+")}(n),o=await fetch(`https://api.openweathermap.org/data/2.5/weather?appid=${t}&q=${r}`);if(401===o.status)throw new Error("Invalid API Key");const{name:i,main:{feels_like:u,temp:s,temp_max:c,temp_min:a},sys:{country:m,sunrise:p,sunset:f},timezone:d,weather:[{description:h}],wind:{deg:w,speed:l}}=await o.json();return{name:i,country:m,weather:h,temp:s,tempMin:a,tempMax:c,tempFeels:u,windSpeed:l,windDeg:w,sunrise:p,sunset:f,timeZoneOffset:d}}function i(e,n){return Number(e).toFixed(n)}function u(e){return i(e,0)}function s(e){return u(e-273.15)}function c(e){return u(function(e){return u(1.8*e+32)}(s(e)))}function a(e){return function(e){return i(e,2)}(2.237*e)}function m(e){return e.split(":").map(Number).join(":")}function p(e){const[n,t]=e.split(":").map(Number);let[r,o]=n<=11?["AM",0]:["PM",1];return 0===n&&(o+=12),`${n%13+o}:${t} ${r}`}const f={body:{}};!async function(e,i=o){try{const o=await i(e);(function(e){["temp","tempMax","tempMin","tempFeels"].forEach((t=>{e[t]=function(e){const t=n[1];return(0,{K:e=>e,"°F":c,"°C":s}[t])(Number(e))+t}(e[t])})),["sunrise","sunset"].forEach((n=>{e[n]=function(e,n){const t=new Date(1e3*(Number(e)+Number(n))).toISOString().slice(11,16);return(0,{hr24:m,hr12:p}[r[1]])(t)}(e[n],e.timeZoneOffset)})),e.windSpeed=function(e){const n=t[1],r=(0,{"meter,second":e=>e,"mile,hour":a}[n])(Number(e)),o=n.split(",");return`${r} ${o[0]}${1===r?"":"s"} per ${o[1]}`}(e.windSpeed),e.windDeg+="°"})(o),f.body=o}catch(e){f.error=e.message}console.log(f)}("London")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,